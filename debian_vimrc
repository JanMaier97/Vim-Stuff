set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" color schemes
" colorschemes
" Plugin 'jnurmine/Zenburn'
" Plugin 'altercation/vim-colors-solarized'

Plugin 'noahfrederick/vim-noctu'
Plugin 'morhetz/gruvbox'


" git stuff
" git commands inside vim
Plugin 'tpope/vim-fugitive'

" display changes inside vim
Plugin 'airblade/vim-gitgutter'

" fuzzy finder
Plugin 'wincent/command-t'

" emmet, html plugin
Plugin 'mattn/emmet-vim.git'

" surround plugin
Plugin 'tpope/vim-surround'

" statusline
Plugin 'itchyny/lightline.vim'

" syntax highlighting
" Plugin 'vim-syntastic/syntastic'

" commenting plugin
Plugin 'tpope/vim-commentary.git'

" filebrowser inside vim
Plugin 'scrooloose/nerdtree.git'

" autocompletion
Plugin 'Valloric/YouCompleteMe'

" writing plugin
Plugin 'reedes/vim-pencil'

" multiple cursors
" Plugin 'terryma/vim-multiple-cursors'

" tag management
" install tagbar
Plugin 'majutsushi/tagbar'

" install tag managaer
Plugin 'ludovicchabant/vim-gutentags'

" writing latex
Plugin 'lervag/vimtex'

" commands for unix commandline
Plugin 'tpope/vim-eunuch'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" vim settings
set nu
syntax on
set encoding=utf-8
set fileencoding=utf-8

" change the backspace behaviour to delete any text
set backspace=indent,eol,start

let mapleader=" "
let maplocalleader="\\"


" tabs and spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent


" splitting behaviour
set splitbelow
set splitright

" split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" lightline settings  \
set laststatus=2 " show the lightline
let g:lightline = {
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \   'ctagstatus': 'gutentags#statusline()'
    \ },
    \ }

" colorscheme settings
set background=dark
colorscheme gruvbox
let g:gruvbox_vert_split = 'bg1'
let g:gruvbox_sign_column = 'bg0'

" Open NERDTree when vim starts without a file specifed
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Open NERDTree when vim opens with directory
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" map NERDTree window to ctrl-n
map <leader>n :NERDTreeToggle<CR>

" close Vim when nerdtree is the last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" tagbar settings
nmap <F8> :TagbarToggle<CR>
" let g:tagbar_ctags_bin = 'C:\ctags58\ctags.exe'

" gutentags settings
"let g:gutentags_ctags_executable = 'C:\ctags58\ctags.exe'


" syntastic settings
" let g:syntastic_java_checkers = []
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" vimtex settings
let g:vimtex_complete_enabled = 1
let g:vimtex_complete_close_braces = 1
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
let g:vimtex_view_method = 'zathura'
